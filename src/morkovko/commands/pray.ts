import Command from './Command';
import * as moment from 'moment';
import { setEmbedAuthor, getTimeFromMins } from './helpers';
import { AppService } from './../../app.service';

const counts = [5, 10, 15, 20];

export class PrayCommand extends Command {
  constructor(commandName: string) {
    super(commandName);
  }

  run(
    message: any,
    args: any,
    service: AppService,
    isSlash: boolean | undefined,
  ) {
    this.initCommand(message, args, service, isSlash, () => {
      const user = this.getUser();
      service.checkUser(user.id).then((res) => {
        if (res.status === 200) {
          const player = res.player;
          const d1 = moment(player.lastPrayDate);
          const d2 = moment(new Date());
          const diff = d2.diff(d1, 'minutes');
          const needDiff = 1440;

          if (diff >= needDiff) {
            const prayCarrots =
              counts[Math.floor(Math.random() * counts.length)];
            player.lastPrayDate = moment(new Date()).toDate();
            player.carrotCount += prayCarrots;
            service.savePlayer(player).then((resSave) => {
              if (resSave.status === 200) {
                this.embed.setDescription(
                  `–°–≤—è—Ç–∞—è –ø–æ–¥–∞—Ä–∏–ª–∞ —Ç–µ–±–µ ${prayCarrots}ü•ï –∑–∞ –º–æ–ª–∏—Ç–≤—É!`,
                );
                this.send({
                  embeds: [setEmbedAuthor(this.embed, user)],
                });
              } else {
                this.embed.setDescription(
                  `–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–º–æ–ª–∏—Ç—å—Å—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.`,
                );
                this.send({
                  embeds: [setEmbedAuthor(this.embed, user)],
                });
              }
            });
          } else {
            this.embed.setDescription(
              `–¢—ã —Å–º–æ–∂–µ—à—å –ø–æ–º–æ–ª–∏—Ç—å—Å—è –Ω–µ —Ä–∞–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ ${getTimeFromMins(
                needDiff - diff,
              )}!`,
            );
            this.send({
              embeds: [setEmbedAuthor(this.embed, user)],
            });
          }
        } else {
          this.replyNoUser(user);
        }
      });
    });
  }
}

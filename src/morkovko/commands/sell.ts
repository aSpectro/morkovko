import Command from './Command';
import {
  setEmbedAuthor,
  getChance,
  randomIntFromInterval,
  abbreviateNumber,
} from './helpers';
import { AppService } from './../../app.service';
import { WarsService } from 'src/wars.service';

export class SellCommand extends Command {
  constructor(
    commandName: string,
    needEvents: boolean,
    warsService?: WarsService,
  ) {
    super(commandName, needEvents, warsService);
  }

  run(
    message: any,
    args: any,
    service: AppService,
    isSlash: boolean | undefined,
  ) {
    this.initCommand(message, args, service, isSlash, () => {
      const user = this.getUser();

      service.checkUser(user.id).then(async (res) => {
        if (res.status === 200) {
          const player = res.player;
          const grabChance = getChance();
          const grabPercent = player.slotsCount >= 50 ? 15 : 5;
          let grab = false;
          if (grabChance <= grabPercent) grab = true;
          if (!player.config?.fair?.isActive) grab = false;
          let count: any = this.getArgAll('–∫–æ–ª-–≤–æ');
          count = count === 'all' ? player.carrotCount : count;
          if (count && player.carrotCount >= count) {
            if (player.carrotCount === 1) grab = false;
            player.carrotCount -= count;
            const grabCount = grab ? Math.floor(count / 2) : count;
            player.points += grab
              ? (count - (grabCount === 0 ? 1 : grabCount)) * this.locale.getBonus(player.config?.fair?.isActive)
              : count * this.locale.getBonus(player.config?.fair?.isActive);

            const fundRes = await service.getActiveFund();
            if (fundRes.status === 200 && grab) {
              const fund = fundRes.fund;
              fund.fundSize += grabCount === 0 ? 1 : grabCount;
              await service.saveFund(fund);
            }

            service.savePlayer(player).then(async (resSave) => {
              if (resSave.status === 200) {
                if (grab) {
                  const neighbours = await this.service.getUserNeighbours(
                    user.id,
                  );
                  const neighbourNumber =
                    neighbours.data.length === 2
                      ? randomIntFromInterval(0, 1)
                      : 0;
                  if (
                    neighbours &&
                    neighbours.status === 200 &&
                    neighbours.data.length > 0
                  ) {
                    const neighbour = neighbours.data[neighbourNumber];
                    this.embed.setDescription(
                      `–í–æ –≤—Ä–µ–º—è –ø—Ä–æ–¥–∞–∂–∏ —Ç–µ–±—è —É–≤–∏–¥–µ–ª —Ç–≤–æ–π —Å–æ—Å–µ–¥ - <@${
                        neighbour.userId
                      }> –∏ —Å–¥–∞–ª —Ç–µ–±—è –Ω–∞–ª–æ–≥–æ–≤–æ–π, —É —Ç–µ–±—è –∏–∑—ä—è–ª–∏ ${
                        grabCount === 0 ? 1 : abbreviateNumber(grabCount)
                      } ${this.locale.getCurrency()} –≤ —Å—á–µ—Ç —Ñ–æ–Ω–¥–∞ –±–æ—Ä—å–±—ã —Å –º–æ—Ä—Ä—É–ø—Ü–∏–µ–π. –¢—ã —Å–º–æ–≥ –ø—Ä–æ–¥–∞—Ç—å ${abbreviateNumber(
                        count - grabCount,
                      )} ${this.locale.getCurrency()}. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É ${abbreviateNumber(
                        player.points,
                      )}üî∏`,
                    );
                  } else {
                    this.embed.setDescription(
                      `–í–æ –≤—Ä–µ–º—è –ø—Ä–æ–¥–∞–∂–∏ —Ç–µ–±—è –∫—Ç–æ-—Ç–æ —É–≤–∏–¥–µ–ª –∏ –ø–æ–∑–≤–æ–Ω–∏–ª –≤ –Ω–∞–ª–æ–≥–æ–≤—É—é, —É —Ç–µ–±—è –∏–∑—ä—è–ª–∏ ${
                        grabCount === 0 ? 1 : abbreviateNumber(grabCount)
                      } ${this.locale.getCurrency()} –≤ —Å—á–µ—Ç —Ñ–æ–Ω–¥–∞ –±–æ—Ä—å–±—ã —Å –º–æ—Ä—Ä—É–ø—Ü–∏–µ–π. –¢—ã —Å–º–æ–≥ –ø—Ä–æ–¥–∞—Ç—å ${abbreviateNumber(
                        count - grabCount,
                      )} ${this.locale.getCurrency()}. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É ${abbreviateNumber(
                        player.points,
                      )}üî∏`,
                    );
                  }
                } else {
                  this.embed.setDescription(
                    `–¢—ã –ø—Ä–æ–¥–∞–ª ${abbreviateNumber(
                      count,
                    )} ${this.locale.getCurrency()}. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –Ω–∞ —Å—á–µ—Ç—É ${abbreviateNumber(
                      player.points,
                    )}üî∏`,
                  );
                }
                this.send({
                  embeds: [setEmbedAuthor(this.embed, user)],
                });
              } else {
                this.embed.setDescription(
                  `–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–æ–¥–∞—Ç—å ${this.locale.getCurrency()}. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.`,
                );
                this.send({
                  embeds: [setEmbedAuthor(this.embed, user)],
                });
              }
            });
          } else {
            if (!count) {
              this.embed.setDescription(`–¢—ã –Ω–µ —É–∫–∞–∑–∞–ª –∫–æ–ª-–≤–æ ${this.locale.getCurrency()}!`);
            } else {
              this.embed.setDescription(
                `–¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ${abbreviateNumber(
                  count - player.carrotCount,
                )}${this.locale.getCurrency()}!`,
              );
            }
            this.send({
              embeds: [setEmbedAuthor(this.embed, user)],
            });
          }
        } else {
          this.replyNoUser(user);
        }
      });
    });
  }
}

import Command from './Command';
import { setEmbedAuthor } from './helpers';
import { AppService } from './../../app.service';

export class GRCommand extends Command {
  constructor(commandName: string) {
    super(commandName);
  }

  run(
    message: any,
    args: any,
    service: AppService,
    isSlash: boolean | undefined,
  ) {
    this.initCommand(message, args, service, isSlash, () => {
      const user = this.getUser();
      const { slotSpeedUpdate } = this.config.bot.economy;
      service.checkUser(user.id).then((res) => {
        if (res.status === 200 && res.player) {
          const player = res.player;
          const price = slotSpeedUpdate;
          if (player.points >= price) {
            player.config.slotSpeedUpdate += 1;
            player.points -= price;
            service.savePlayer(player).then((resSave) => {
              if (resSave.status === 200) {
                this.embed.setDescription(
                  `–¢—ã —É–≤–µ–ª–∏—á–∏–ª –±–æ–Ω—É—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞ –º–æ—Ä–∫–æ–≤–∫–∏ –≤ –≥–æ—Ä—à–∫–∞—Ö. –¢–µ–∫—É—â–∏–π –±–æ–Ω—É—Å **${player.config.slotSpeedUpdate}%**`,
                );
                this.send({
                  embeds: [setEmbedAuthor(this.embed, user)],
                });
              } else {
                this.embed.setDescription(
                  `–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∫—É–ø–∏—Ç—å –±–æ–Ω—É—Å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.`,
                );
                this.send({
                  embeds: [setEmbedAuthor(this.embed, user)],
                });
              }
            });
          } else {
            this.embed.setDescription(
              `–¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ${price - player.points}üî∏!`,
            );
            this.send({
              embeds: [setEmbedAuthor(this.embed, user)],
            });
          }
        } else {
          this.replyNoUser(user);
        }
      });
    });
  }
}

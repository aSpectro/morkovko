import Command from './Command';
import { setEmbedAuthor, abbreviateNumber } from './helpers';
import { AppService } from './../../app.service';
import { WarsService } from 'src/wars.service';

export class UpgradeCommand extends Command {
  constructor(
    commandName: string,
    needEvents: boolean,
    warsService?: WarsService,
  ) {
    super(commandName, needEvents, warsService);
  }

  run(
    message: any,
    args: any,
    service: AppService,
    isSlash: boolean | undefined,
  ) {
    this.initCommand(message, args, service, isSlash, () => {
      const user = this.getUser();
      service.checkUser(user.id).then((res) => {
        if (res.status === 200) {
          const player = res.player;
          let count: any = this.getArgAll('–∫–æ–ª-–≤–æ');
          count = count === 'all' ? this.getMaxAllCount(player, true) : count;
          const price = this.getAllPrice(player, count, true);
          if (count && player.points >= price) {
            player.carrotSize += count;
            if (player.config.stars.isDung && player.carrotSize % 5 === 0) {
              player.carrotSize += 1;
            }
            player.points -= price;
            player.carrotAvatar = this.getRandomAvatar();
            service.savePlayer(player).then((resSave) => {
              if (resSave.status === 200) {
                this.embed.setDescription(
                  `–¢—ã —É–≤–µ–ª–∏—á–∏–ª –∫–æ–Ω–∫—É—Ä—Å–Ω—É—é –º–æ—Ä–∫–æ–≤–∫—É. –¢–µ–ø–µ—Ä—å –µ–µ —Ä–∞–∑–º–µ—Ä **${abbreviateNumber(
                    player.carrotSize,
                  )}** —Å–º! –í–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∞ –º—É—Ç–∏—Ä–æ–≤–∞–ª–∞.`,
                );
                this.send({
                  embeds: [setEmbedAuthor(this.embed, user)],
                });
              } else {
                this.embed.setDescription(
                  `–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å–Ω—É—é –º–æ—Ä–∫–æ–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.`,
                );
                this.send({
                  embeds: [setEmbedAuthor(this.embed, user)],
                });
              }
            });
          } else {
            if (this.getArgAll('–∫–æ–ª-–≤–æ') === 'all' && count === 0) {
              this.embed.setDescription(`–¢–µ–±–µ –ø–æ–∫–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç üî∏!`);
            } else if (this.getArgAll('–∫–æ–ª-–≤–æ') !== 'all' && !count) {
              this.embed.setDescription(`–¢—ã –Ω–µ —É–∫–∞–∑–∞–ª –∫–æ–ª-–≤–æ —Ä–∞–∑!`);
            } else {
              console.log(price, count);
              this.embed.setDescription(
                `–¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ${abbreviateNumber(price - player.points)}üî∏!`,
              );
            }
            this.send({
              embeds: [setEmbedAuthor(this.embed, user)],
            });
          }
        } else {
          this.replyNoUser(user);
        }
      });
    });
  }
}

import Command from './Command';
import { setEmbedAuthor, calcPrice, getCarrotLevel } from './helpers';
import { AppService } from './../../app.service';

export class UpgradeCommand extends Command {
  constructor(commandName: string) {
    super(commandName);
  }

  run(
    message: any,
    args: any,
    service: AppService,
    isSlash: boolean | undefined,
  ) {
    this.initCommand(message, args, service, isSlash, () => {
      const user = this.getUser();
      const { upgrade } = this.config.bot.economy;
      service.checkUser(user.id).then((res) => {
        if (res.status === 200) {
          const player = res.player;
          const carrotLevel = getCarrotLevel(player.carrotSize);
          const price = calcPrice(player.slots.length, upgrade);
          const count = this.getArgString('–∫–æ–ª-–≤–æ');
          if (count && player.points >= count * price && count <= 5) {
            player.carrotSize += count;
            player.points -= count * price;
            player.carrotAvatar = this.getRandomAvatar();
            service.savePlayer(player).then((resSave) => {
              if (resSave.status === 200) {
                this.embed.setDescription(
                  `–¢—ã —É–≤–µ–ª–∏—á–∏–ª –∫–æ–Ω–∫—É—Ä—Å–Ω—É—é –º–æ—Ä–∫–æ–≤–∫—É. –¢–µ–ø–µ—Ä—å –µ–µ —Ä–∞–∑–º–µ—Ä **${player.carrotSize}** —Å–º! –í–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∞ –º—É—Ç–∏—Ä–æ–≤–∞–ª–∞.`,
                );
                this.send({
                  embeds: [setEmbedAuthor(this.embed, user)],
                });
              } else {
                this.embed.setDescription(
                  `–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å–Ω—É—é –º–æ—Ä–∫–æ–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.`,
                );
                this.send({
                  embeds: [setEmbedAuthor(this.embed, user)],
                });
              }
            });
          } else {
            if (!count) {
              this.embed.setDescription(`–¢—ã –Ω–µ —É–∫–∞–∑–∞–ª –∫–æ–ª-–≤–æ —Ä–∞–∑!`);
            } else if (count > 5) {
              this.embed.setDescription(
                `–ó–∞ —Ä–∞–∑, –º–æ—Ä–∫–æ–≤–∫—É –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ 5—Å–º!`,
              );
            } else {
              this.embed.setDescription(
                `–¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ${count * price - player.points}üî∏!`,
              );
            }
            this.send({
              embeds: [setEmbedAuthor(this.embed, user)],
            });
          }
        } else {
          this.replyNoUser(user);
        }
      });
    });
  }
}

import { EmbedBuilder } from 'discord.js';
import {
  noUserEmbed,
  setEmbedAuthor,
  randomIntFromInterval,
  calcPrice,
  getCarrotLevel,
} from './helpers';
import config from '../config';
const { upgrade } = config.bot.economy;
const carrotsLimit = config.bot.carrotsLimit;

export default {
  name: '—É–≤–µ–ª–∏—á–∏—Ç—å',
  run: (message, args, service, isSlash) => {
    const embedSuccess = new EmbedBuilder().setColor('#f97a50');
    const embedError = new EmbedBuilder().setColor('#f97a50');
    const user = isSlash ? message.user : message.author;
    const send = async (a) => {
      if (isSlash) await message.reply(a).catch(() => console.log(''));
      else message.channel.send(a).catch(() => console.log(''));
    };
    service.checkUser(user.id).then((res) => {
      if (res.status === 200) {
        const player = res.player;
        const carrotLevel = getCarrotLevel(player.carrotSize);
        const price = calcPrice(carrotLevel, upgrade);
        const count = isSlash
          ? Math.abs(parseInt(args.getString('–∫–æ–ª-–≤–æ')))
          : Math.abs(parseInt(args[0]));
        if (count && player.points >= count * price && count <= 3) {
          const carrotNum = randomIntFromInterval(1, carrotsLimit);
          player.carrotSize += count;
          player.points -= count * price;
          player.carrotAvatar = `./outputs/carrots/${carrotNum}.png`;
          service.savePlayer(player).then((resSave) => {
            if (resSave.status === 200) {
              embedSuccess.setDescription(
                `–¢—ã —É–≤–µ–ª–∏—á–∏–ª –∫–æ–Ω–∫—É—Ä—Å–Ω—É—é –º–æ—Ä–∫–æ–≤–∫—É. –¢–µ–ø–µ—Ä—å –µ–µ —Ä–∞–∑–º–µ—Ä **${player.carrotSize}** —Å–º! –í–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∞ –º—É—Ç–∏—Ä–æ–≤–∞–ª–∞.`,
              );
              send({
                embeds: [setEmbedAuthor(embedSuccess, user)],
              });
            } else {
              embedError.setDescription(
                `–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å–Ω—É—é –º–æ—Ä–∫–æ–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.`,
              );
              send({
                embeds: [setEmbedAuthor(embedError, user)],
              });
            }
          });
        } else {
          if (!count) {
            embedError.setDescription(`–¢—ã –Ω–µ —É–∫–∞–∑–∞–ª –∫–æ–ª-–≤–æ —Ä–∞–∑!`);
          } else if (count > 3) {
            embedError.setDescription(
              `–ó–∞ —Ä–∞–∑, –º–æ—Ä–∫–æ–≤–∫—É –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ 3—Å–º!`,
            );
          } else {
            embedError.setDescription(
              `–¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ${count * price - player.points}üî∏!`,
            );
          }
          send({
            embeds: [setEmbedAuthor(embedError, user)],
          });
        }
      } else {
        send({ embeds: [noUserEmbed(user)] });
      }
    });
  },
};

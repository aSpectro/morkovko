import { EmbedBuilder } from 'discord.js';
import { noUserEmbed, setEmbedAuthor } from './helpers';
import config from '../config';
const { pugalo } = config.bot.economy;

export default {
  name: '–ø—É–≥–∞–ª–æ',
  run: (message, args, service, isSlash) => {
    const embedSuccess = new EmbedBuilder().setColor('#f97a50');
    const embedError = new EmbedBuilder().setColor('#f97a50');
    const user = isSlash ? message.user : message.author;
    const send = async (a) => {
      if (isSlash) await message.reply(a).catch(() => console.log(''));
      else message.channel.send(a).catch(() => console.log(''));
    };
    service.checkUser(user.id).then((res) => {
      if (res.status === 200) {
        const player = res.player;
        const price = pugalo;
        if (player.points >= price && !player.hasPugalo) {
          player.hasPugalo = true;
          player.points -= price;
          service.savePlayer(player).then((resSave) => {
            if (resSave.status === 200) {
              embedSuccess.setDescription(
                `–¢—ã –∫—É–ø–∏–ª –ø—É–≥–∞–ª–æ. –¢–µ–ø–µ—Ä—å —Ç–≤–æ—è —Ñ–µ—Ä–º–∞ –∑–∞—â–∏—â–µ–Ω–∞ –æ—Ç –º–∞—Ñ–∏–∏! –ù–æ –Ω–µ –∑–∞–±—ã–≤–∞–π —á—Ç–æ —Ç–≤–æ–π —Å–æ—Å–µ–¥ –≤–æ—Ä—É–µ—Ç —Ç–≤–æ–µ –ø—É–≥–∞–ª–æ –≤ –æ–±–µ–¥ –∏–ª–∏ –ø–æ–ª–Ω–æ—á—å.`,
              );
              send({
                embeds: [setEmbedAuthor(embedSuccess, user)],
              });
            } else {
              embedError.setDescription(
                `–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∫—É–ø–∏—Ç—å –ø—É–≥–∞–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.`,
              );
              send({
                embeds: [setEmbedAuthor(embedError, user)],
              });
            }
          });
        } else {
          if (player.hasPugalo) {
            embedError.setDescription(`–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –ø—É–≥–∞–ª–æ!`);
          } else {
            embedError.setDescription(
              `–¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ${price - player.points}üî∏!`,
            );
          }
          send({
            embeds: [setEmbedAuthor(embedError, user)],
          });
        }
      } else {
        send({ embeds: [noUserEmbed(user)] });
      }
    });
  },
};

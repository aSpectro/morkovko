import { EmbedBuilder } from 'discord.js';
import { noUserEmbed, setEmbedAuthor, getCarrotLevel, getMaxSlots } from './helpers';
import config from '../config';
const { slot } = config.bot.economy;

export default {
  name: '–∫—É–ø–∏—Ç—å',
  run: (message, args, service, isSlash) => {
    const embedSuccess = new EmbedBuilder().setColor('#f97a50');
    const embedError = new EmbedBuilder().setColor('#f97a50');
    const user = isSlash ? message.user : message.author;
    const send = async (a) => {
      if (isSlash) await message.reply(a).catch(() => console.log(''));
      else message.channel.send(a).catch(() => console.log(''));
    };
    service.checkUser(user.id).then((res) => {
      if (res.status === 200) {
        const player = res.player;
        const price = slot;
        const maxSlots = getMaxSlots(getCarrotLevel(player.carrotSize));
        const playerSlots = player.slots.length;
        const count = isSlash
          ? Math.abs(parseInt(args.getString('–∫–æ–ª-–≤–æ')))
          : Math.abs(parseInt(args[0]));
        if (
          count &&
          player.points >= count * price &&
          playerSlots + count <= maxSlots
        ) {
          for (let i = 0; i < count; i++) {
            player.slots.push({
              progress: 0,
              factor: 0,
            });
          }
          player.points -= price * count;
          service.savePlayer(player).then((resSave) => {
            if (resSave.status === 200) {
              embedSuccess.setDescription(
                `–¢—ã –∫—É–ø–∏–ª ${count}üß∫. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è **${player.slots.length}** üß∫!`,
              );
              send({
                embeds: [setEmbedAuthor(embedSuccess, user)],
              });
            } else {
              embedError.setDescription(
                `–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∫—É–ø–∏—Ç—å –≥–æ—Ä—à–æ–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.`,
              );
              send({
                embeds: [setEmbedAuthor(embedError, user)],
              });
            }
          });
        } else {
          if (!count) {
            embedError.setDescription(`–¢—ã –Ω–µ —É–∫–∞–∑–∞–ª –∫–æ–ª-–≤–æ üß∫!`);
          } else if (playerSlots + count > maxSlots) {
            embedError.setDescription(
              `–¢—ã –Ω–µ –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å ${count} üß∫! –£–≤–µ–ª–∏—á–∏–≤–∞–π –∫–æ–Ω–∫—É—Ä—Å–Ω—É—é –º–æ—Ä–∫–æ–≤–∫—É, —Å–µ–π—á–∞—Å —Ç–≤–æ–π –ª–∏–º–∏—Ç ${playerSlots}/${maxSlots} üß∫`,
            );
          } else {
            embedError.setDescription(
              `–¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ${price * count - player.points}üî∏!`,
            );
          }
          send({
            embeds: [setEmbedAuthor(embedError, user)],
          });
        }
      } else {
        send({ embeds: [noUserEmbed(user)] });
      }
    });
  },
};

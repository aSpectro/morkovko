import Command from './Command';
import { setEmbedAuthor, getCarrotLevel, getMaxSlots } from './helpers';
import { AppService } from './../../app.service';

export class BuyCommand extends Command {
  constructor(commandName: string) {
    super(commandName);
  }

  run(
    message: any,
    args: any,
    service: AppService,
    isSlash: boolean | undefined,
  ) {
    this.initCommand(message, args, service, isSlash, () => {
      const user = this.getUser();
      const { slot } = this.config.bot.economy;
      service.checkUser(user.id).then((res) => {
        if (res.status === 200) {
          const player = res.player;
          const price = slot;
          const maxSlots = getMaxSlots(getCarrotLevel(player.carrotSize));
          const playerSlots = player.slots.length;
          const count = this.getArgString('–∫–æ–ª-–≤–æ');
          if (
            count &&
            player.points >= count * price &&
            playerSlots + count <= maxSlots
          ) {
            for (let i = 0; i < count; i++) {
              player.slots.push({
                progress: 0,
                factor: 0,
              });
            }
            player.points -= price * count;
            service.savePlayer(player).then((resSave) => {
              if (resSave.status === 200) {
                this.embed.setDescription(
                  `–¢—ã –∫—É–ø–∏–ª ${count}üß∫. –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è **${player.slots.length}** üß∫!`,
                );
                this.send({
                  embeds: [setEmbedAuthor(this.embed, user)],
                });
              } else {
                this.embed.setDescription(
                  `–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∫—É–ø–∏—Ç—å –≥–æ—Ä—à–æ–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.`,
                );
                this.send({
                  embeds: [setEmbedAuthor(this.embed, user)],
                });
              }
            });
          } else {
            if (!count) {
              this.embed.setDescription(`–¢—ã –Ω–µ —É–∫–∞–∑–∞–ª –∫–æ–ª-–≤–æ üß∫!`);
            } else if (playerSlots + count > maxSlots) {
              this.embed.setDescription(
                `–¢—ã –Ω–µ –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å ${count} üß∫! –£–≤–µ–ª–∏—á–∏–≤–∞–π –∫–æ–Ω–∫—É—Ä—Å–Ω—É—é –º–æ—Ä–∫–æ–≤–∫—É, —Å–µ–π—á–∞—Å —Ç–≤–æ–π –ª–∏–º–∏—Ç **${playerSlots}/${maxSlots}** üß∫`,
              );
            } else {
              this.embed.setDescription(
                `–¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ${price * count - player.points}üî∏!`,
              );
            }
            this.send({
              embeds: [setEmbedAuthor(this.embed, user)],
            });
          }
        } else {
          this.replyNoUser(user);
        }
      });
    });
  }
}

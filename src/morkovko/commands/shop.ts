import { EmbedBuilder } from 'discord.js';
import { noUserEmbed, setEmbedAuthor, calcPrice } from './helpers';
import config from '../config';

const { pugalo, slot, upgrade } = config.bot.economy;

export default {
  name: '–º–∞–≥–∞–∑–∏–Ω',
  run: (message, args, service, isSlash) => {
    const embedSuccess = new EmbedBuilder().setColor('#f97a50');
    const user = isSlash ? message.user : message.author;
    const send = async (a) => {
      if (isSlash) await message.reply(a).catch(() => console.log(''));
      else message.channel.send(a).catch(() => console.log(''));
    };
    service.checkUser(user.id).then((res) => {
      if (res.status === 200) {
        const player = res.player;
        const playerSlots = player.slots.length;
        embedSuccess.setDescription(`–ú–æ—Ä–∫–æ–≤–æ–∫: **ü•ï ${player.carrotCount.toLocaleString()}**\n
        –û—á–∫–æ–≤ —É–ª—É—á—à–µ–Ω–∏–π: **üî∏ ${player.points.toLocaleString()}**`);
        embedSuccess.addFields(
          {
            name: '!–ø—Ä–æ–¥–∞—Ç—å',
            value: `–ü—Ä–æ–¥–∞—Ç—å –º–æ—Ä–∫–æ–≤–∫–∏ –∑–∞ üî∏. **!–ø—Ä–æ–¥–∞—Ç—å <–∫–æ–ª-–≤–æ>**`,
            inline: true,
          },
          {
            name: '!–∫—É–ø–∏—Ç—å',
            value: `–ö—É–ø–∏—Ç—å –≥–æ—Ä—à–æ–∫ –∑–∞ ${calcPrice(playerSlots, slot)} üî∏.`,
            inline: true,
          },
          {
            name: '!—É–≤–µ–ª–∏—á–∏—Ç—å',
            value: `–£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å–Ω—É—é –º–æ—Ä–∫–æ–≤–∫—É –∑–∞ **${calcPrice(
              playerSlots,
              upgrade,
            )}üî∏** –Ω–∞ 1—Å–º. **!—É–≤–µ–ª–∏—á–∏—Ç—å <–∫–æ–ª-–≤–æ>**`,
            inline: true,
          },
          {
            name: '!–ø—É–≥–∞–ª–æ',
            value: `–ö—É–ø–∏—Ç—å –ø—É–≥–∞–ª–æ –∑–∞ ${calcPrice(
              playerSlots,
              pugalo,
            )} üî∏, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—É–≥–∏–≤–∞–µ—Ç –º–∞—Ñ–∏—é, –Ω–æ –≤ –æ–±–µ–¥ –∏ –ø–æ–ª–Ω–æ—á—å –≤–∞—à —Å–æ—Å–µ–¥ –≤–æ—Ä—É–µ—Ç –≤–∞—à–µ –ø—É–≥–∞–ª–æ`,
            inline: true,
          },
        );
        send({ embeds: [setEmbedAuthor(embedSuccess, user)] });
      } else {
        send({ embeds: [noUserEmbed(user)] });
      }
    });
  },
};

import { Routes, SlashCommandBuilder } from 'discord.js';
import { REST } from '@discordjs/rest';

export function registerSlashCommands(clientId, guildId, token) {
  const commands = [
    new SlashCommandBuilder().setName('–ø–æ–º–æ—â—å').setDescription('–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥'),
    new SlashCommandBuilder()
      .setName('–Ω–∞—á–∞—Ç—å')
      .setDescription('–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–µ'),
    new SlashCommandBuilder().setName('–≤—ã–∫—Ç–∏').setDescription('–í—ã–∫—Ç–∏ –∏–∑ –∏–≥—Ä—ã'),
    new SlashCommandBuilder()
      .setName('–ø–æ–ª–∏—Ç—å')
      .setDescription('–ü–æ–ª–∏—Ç—å —Å–≤–æ–∏ –º–æ—Ä–∫–æ–≤–∫–∏, –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞–∑ –≤ —á–∞—Å'),
    new SlashCommandBuilder()
      .setName('–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å')
      .setDescription('–£–∑–Ω–∞—Ç—å –∫–æ–ª-–≤–æ –º–æ—Ä–∫–æ–≤–æ–∫, –æ—á–∫–æ–≤ –∏ –≥–æ—Ä—à–∫–æ–≤'),
    new SlashCommandBuilder()
      .setName('–º–∞–≥–∞–∑–∏–Ω')
      .setDescription('–ú–∞–≥–∞–∑–∏–Ω –∑–∞ –û–£'),
    new SlashCommandBuilder()
      .setName('–ø—É–≥–∞–ª–æ')
      .setDescription(
        '–ö—É–ø–∏—Ç—å –ø—É–≥–∞–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—É–≥–∏–≤–∞–µ—Ç –º–∞—Ñ–∏—é, –Ω–æ –≤ –æ–±–µ–¥ –∏ –ø–æ–ª–Ω–æ—á—å –≤–∞—à —Å–æ—Å–µ–¥ –≤–æ—Ä—É–µ—Ç –≤–∞—à–µ –ø—É–≥–∞–ª–æ',
      ),
    new SlashCommandBuilder()
      .setName('–ø–æ–¥–∞—Ä–∏—Ç—å')
      .setDescription('–ü–æ–¥–∞—Ä–∏—Ç—å –º–æ—Ä–∫–æ–≤–∫–∏ –¥—Ä—É–≥—É: !–ø–æ–¥–∞—Ä–∏—Ç—å <–∫–æ–ª-–≤–æ> @<–Ω–∏–∫–Ω–µ–π–º>')
      .addStringOption((option) =>
        option
          .setName('–∫–æ–ª-–≤–æ')
          .setDescription('–ö–æ–ª-–≤–æ –º–æ—Ä–∫–æ–≤–æ–∫')
          .setRequired(true),
      )
      .addUserOption((option) =>
        option
          .setName('–∏–≥—Ä–æ–∫')
          .setDescription('–ò–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä–æ–º—É —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–¥–∞—Ä–∏—Ç—å –º–æ—Ä–∫–æ–≤–∫–∏')
          .setRequired(true),
      ),
    new SlashCommandBuilder()
      .setName('–∏–≥—Ä–æ–∫')
      .setDescription(
        '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ, —É–∑–Ω–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –¥—Ä—É–∂–±—ã, –µ–≥–æ –º–æ—Ä–∫–æ–≤–∫—É. !–∏–≥—Ä–æ–∫ @<–Ω–∏–∫–Ω–µ–π–º>',
      )
      .addUserOption((option) =>
        option
          .setName('–∏–≥—Ä–æ–∫')
          .setDescription('–ò–≥—Ä–æ–∫, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å')
          .setRequired(true),
      ),
    new SlashCommandBuilder()
      .setName('–º–æ—Ä–∫–æ–≤–∫–∞')
      .setDescription('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–≤–æ—é –º–æ—Ä–∫–æ–≤–∫—É'),
    new SlashCommandBuilder()
      .setName('—Å–≤–∏–¥–∞–Ω–∏–µ')
      .setDescription('–°—Ö–æ–¥–∏—Ç—å —Å –∫–µ–º-—Ç–æ –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ'),
    new SlashCommandBuilder()
      .setName('—Ç–æ–ø')
      .setDescription('–£–∑–Ω–∞—Ç—å —Ä–∞–∑–º–µ—Ä –∫–æ–Ω–∫—É—Ä—Å–Ω–æ–π –º–æ—Ä–∫–æ–≤–∫–∏ –∏ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ'),
    new SlashCommandBuilder()
      .setName('–ø–æ–º–æ–ª–∏—Ç—å—Å—è')
      .setDescription('–°—Ö–æ–¥–∏—Ç—å –Ω–∞ –∏—Å–ø–æ–≤–µ–¥—å –∏ –ø–æ–º–æ–ª–∏—Ç—å—Å—è —Å–≤—è—Ç–æ–π'),
    new SlashCommandBuilder()
      .setName('–∏–Ω—Ñ–æ')
      .setDescription(
        '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É–ª–¥–∞—É–Ω–∞—Ö –∫–æ–º–∞–Ω–¥ !–ø–æ–ª–∏—Ç—å –∏ !–ø–æ–º–æ–ª–∏—Ç—å—Å—è, –∞ —Ç–∞–∫ –∂–µ –æ–± —Å–æ–∑—Ä–µ–≤–∞–Ω–∏–∏ –º–æ—Ä–∫–æ–≤–∫–∏',
      ),
    new SlashCommandBuilder()
      .setName('–ø—Ä–æ–¥–∞—Ç—å')
      .setDescription('–ü—Ä–æ–¥–∞—Ç—å –º–æ—Ä–∫–æ–≤–∫–∏ –∑–∞ üî∏. !–ø—Ä–æ–¥–∞—Ç—å <–∫–æ–ª-–≤–æ>')
      .addStringOption((option) =>
        option
          .setName('–∫–æ–ª-–≤–æ')
          .setDescription('–ö–æ–ª-–≤–æ –º–æ—Ä–∫–æ–≤–æ–∫')
          .setRequired(true),
      ),
    new SlashCommandBuilder()
      .setName('–∫—É–ø–∏—Ç—å')
      .setDescription('–ö—É–ø–∏—Ç—å –≥–æ—Ä—à–æ–∫.')
      .addStringOption((option) =>
        option
          .setName('–∫–æ–ª-–≤–æ')
          .setDescription('–ö–æ–ª-–≤–æ –≥–æ—Ä—à–∫–æ–≤')
          .setRequired(true),
      ),
    new SlashCommandBuilder()
      .setName('—É–≤–µ–ª–∏—á–∏—Ç—å')
      .setDescription('–£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–Ω–∫—É—Ä—Å–Ω—É—é –º–æ—Ä–∫–æ–≤–∫—É. !—É–≤–µ–ª–∏—á–∏—Ç—å <–∫–æ–ª-–≤–æ>')
      .addStringOption((option) =>
        option.setName('–∫–æ–ª-–≤–æ').setDescription('–ö–æ–ª-–≤–æ —Ä–∞–∑').setRequired(true),
      ),
  ].map((command) => command.toJSON());

  const rest = new REST({ version: '10' }).setToken(token);

  rest
    .put(Routes.applicationGuildCommands(clientId, guildId), { body: commands })
    .then(() => console.log('Successfully registered application commands.'))
    .catch(console.error);
}

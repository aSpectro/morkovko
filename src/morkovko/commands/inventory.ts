import Command from './Command';
import {
  setEmbedAuthor,
  getCarrotLevel,
  getMaxSlots,
  abbreviateNumber,
} from './helpers';
import { AppService } from './../../app.service';
import { WarsService } from 'src/wars.service';

export class InventoryCommand extends Command {
  constructor(
    commandName: string,
    needEvents: boolean,
    warsService?: WarsService,
  ) {
    super(commandName, needEvents, warsService);
  }

  run(
    message: any,
    args: any,
    service: AppService,
    isSlash: boolean | undefined,
  ) {
    this.initCommand(message, args, service, isSlash, () => {
      const user = this.getUser();
      service.checkUser(user.id).then(async (res) => {
        if (res.status === 200) {
          const player = res.player;
          const maxSlots = getMaxSlots(getCarrotLevel(player.carrotSize));
          const playerSlots = player.slotsCount;
          const neighbours = await this.service.getUserNeighbours(user.id);
          let neighboursString = '—É —Ç–µ–±—è –Ω–µ—Ç —Å–æ—Å–µ–¥–µ–π';
          if (neighbours.data.length > 0) {
            neighboursString = neighbours.data
              .map((m) => `<@${m.userId}>`)
              .join(', ');
          }

          const debuffs = player.config.debuffs;

          this.embed.setDescription(`**–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å**\n
          –¢–≤–æ–π –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –±–æ–Ω—É—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ **${
            player.progressBonus
          }**\n–¢–≤–æ–∏ —Å–æ—Å–µ–¥–∏ –Ω–∞ —Ñ–µ—Ä–º–µ: ${neighboursString}\n
          –ü—É–≥–∞–ª–æ: ${
            player.hasPugalo ? '**–µ—Å—Ç—å**' : '**–Ω–µ—Ç**'
          }\n–ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∞ –ø—É–≥–∞–ª–∞: ${
            player.config.autoBuyPugalo ? '**–∞–∫—Ç–∏–≤–Ω–∞**' : '**–Ω–µ—Ç**'
          }\n–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–æ–¥–∞—Ä–∫–æ–≤: **${
            player.dailyGiftCount
          }/3**\n–î–µ–±–∞—Ñ—ã: **${debuffs ? debuffs : 0}**`);
          this.embed.addFields(
            {
              name: '–ú–æ—Ä–∫–æ–≤–æ–∫',
              value: `ü•ï ${abbreviateNumber(player.carrotCount)}`,
              inline: true,
            },
            {
              name: '–û—á–∫–æ–≤ —É–ª—É—á—à–µ–Ω–∏–π',
              value: `üî∏ ${abbreviateNumber(player.points)}`,
              inline: true,
            },
            {
              name: '–ì–æ—Ä—à–∫–æ–≤',
              value: `üß∫ **${abbreviateNumber(playerSlots)}/${abbreviateNumber(
                maxSlots,
              )}**`,
              inline: true,
            },
            {
              name: '–ó–≤–µ–∑–¥',
              value: `‚≠ê ${abbreviateNumber(player.stars)}`,
              inline: true,
            },
            {
              name: '–ë–æ–Ω—É—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞',
              value: `üìà **${player.config.slotSpeedUpdate}%/50%**`,
              inline: true,
            },
            {
              name: '–ë–æ–Ω—É—Å –∫—É–ª–¥–∞—É–Ω–∞ —Å–≤–∏–¥–∞–Ω–∏—è',
              value: `üë®üèª‚Äçü§ù‚Äçüë®üèª **${player.config.cooldowns.adate}%/50%**`,
              inline: true,
            },
            {
              name: '–ë–æ–Ω—É—Å –∫—É–ª–¥–∞—É–Ω–∞ –ø–æ–ª–∏–≤–∞',
              value: `üíß **${player.config.cooldowns.watering}%/50%**`,
              inline: true,
            },
            {
              name: '–ë–æ–Ω—É—Å –∫—É–ª–¥–∞—É–Ω–∞ –º–æ–ª–∏—Ç–≤—ã',
              value: `üôè **${player.config.cooldowns.pray}%/50%**`,
              inline: true,
            },
          );
          this.send({ embeds: [setEmbedAuthor(this.embed, user)] });
        } else {
          this.replyNoUser(user);
        }
      });
    });
  }
}

import Command from './Command';
import {
  setEmbedAuthor,
  calcTime,
  getCarrotLevel,
  getMaxSlots,
} from './helpers';
import { AppService } from './../../app.service';

export class InventoryCommand extends Command {
  constructor(commandName: string) {
    super(commandName);
  }

  run(
    message: any,
    args: any,
    service: AppService,
    isSlash: boolean | undefined,
  ) {
    this.initCommand(message, args, service, isSlash, () => {
      const user = this.getUser();
      service.checkUser(user.id).then((res) => {
        if (res.status === 200) {
          const player = res.player;
          const maxSlots = getMaxSlots(getCarrotLevel(player.carrotSize));
          const playerSlots = player.slots.length;

          let maxProgress = player.slots[0];
          for (const slot of player.slots) {
            if (slot.progress > maxProgress.progress) {
              maxProgress = slot;
            } else if (
              slot.progress === maxProgress.progress &&
              slot.factor > maxProgress.factor
            ) {
              maxProgress = slot;
            }
          }
          const p = Math.round(maxProgress.progress);
          this.embed.setDescription(`–¢–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å\n
          –ë–ª–∏–∂–∞–π—à–∞—è –∫ —Å–æ–∑—Ä–µ–≤–∞–Ω–∏—é –º–æ—Ä–∫–æ–≤–∫–∞: **${p}%**. –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ **${calcTime(
            maxProgress.progress,
            maxProgress.factor,
            this.config.bot.hourProgress,
          )}—á.**\n–ü—É–≥–∞–ª–æ: ${player.hasPugalo ? '**–µ—Å—Ç—å**' : '**–Ω–µ—Ç**'}`);
          this.embed.addFields(
            {
              name: '–ú–æ—Ä–∫–æ–≤–æ–∫',
              value: `ü•ï ${player.carrotCount.toLocaleString()}`,
              inline: true,
            },
            {
              name: '–û—á–∫–æ–≤ —É–ª—É—á—à–µ–Ω–∏–π',
              value: `üî∏ ${player.points.toLocaleString()}`,
              inline: true,
            },
            {
              name: '–ì–æ—Ä—à–∫–æ–≤',
              value: `üß∫ **${playerSlots}/${maxSlots}**`,
              inline: true,
            },
          );
          this.send({ embeds: [setEmbedAuthor(this.embed, user)] });
        } else {
          this.replyNoUser(user);
        }
      });
    });
  }
}

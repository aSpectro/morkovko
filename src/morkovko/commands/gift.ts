import Command from './Command';
import { setEmbedAuthor, getRelLevelName } from './helpers';
import { AppService } from './../../app.service';
import { WarsService } from 'src/wars.service';

export class GiftCommand extends Command {
  constructor(
    commandName: string,
    needEvents: boolean,
    warsService?: WarsService,
  ) {
    super(commandName, needEvents, warsService);
  }

  run(
    message: any,
    args: any,
    service: AppService,
    isSlash: boolean | undefined,
  ) {
    this.initCommand(message, args, service, isSlash, () => {
      const user = this.getUser();
      const userMention = this.getArgUser('–∏–≥—Ä–æ–∫');
      service.checkUser(user.id).then((res) => {
        if (res.status === 200) {
          const { maxGiftCount } = this.config.bot.economy;
          const player = res.player;
          const count = this.getArgString('–∫–æ–ª-–≤–æ');
          if (
            userMention &&
            count &&
            userMention.id !== user.id &&
            player.carrotCount >= count &&
            count <= maxGiftCount &&
            player.dailyGiftCount > 0
          ) {
            service.checkUser(userMention.id).then((resMention) => {
              if (resMention.status === 200) {
                const playerMention = resMention.player;
                player.carrotCount -= count;
                playerMention.carrotCount += count;

                let level = 0;
                const levelBoost = Math.round((count / 5) * 2 + 1);

                if (player.relations) {
                  const relUser = player.relations.find(
                    (f) => f.userId === playerMention.userId,
                  );

                  if (relUser) {
                    relUser.level += levelBoost;
                  } else {
                    player.relations.push({
                      userId: playerMention.userId,
                      level: levelBoost,
                    });
                  }
                } else {
                  player.relations = [
                    {
                      userId: playerMention.userId,
                      level: levelBoost,
                    },
                  ];
                }

                if (playerMention.relations) {
                  const relUser = playerMention.relations.find(
                    (f) => f.userId === player.userId,
                  );

                  if (relUser) {
                    relUser.level += levelBoost;
                  } else {
                    playerMention.relations.push({
                      userId: player.userId,
                      level: levelBoost,
                    });
                  }
                } else {
                  playerMention.relations = [
                    {
                      userId: player.userId,
                      level: levelBoost,
                    },
                  ];
                }

                level = player.relations.find(
                  (f) => f.userId === playerMention.userId,
                ).level;

                player.dailyGiftCount -= 1;

                service.savePlayer(player).then((resSave) => {
                  if (resSave.status === 200) {
                    service.savePlayer(playerMention).then((resSaveMention) => {
                      if (resSaveMention.status === 200) {
                        this.embed.setDescription(
                          `–¢—ã –ø–æ–¥–∞—Ä–∏–ª <@${
                            playerMention.userId
                          }> ${count}ü•ï. –í–∞—à —É—Ä–æ–≤–µ–Ω—å –æ—Ç–Ω–æ—à–µ–Ω–∏–π –ø–æ–≤—ã—à–µ–Ω –¥–æ ${level} –æ—á–∫–æ–≤ - **${getRelLevelName(
                            level,
                          )}**`,
                        );
                        this.send({
                          embeds: [setEmbedAuthor(this.embed, user)],
                        });
                      } else {
                        this.embed.setDescription(
                          `–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–¥–∞—Ä–∏—Ç—å ü•ï. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.`,
                        );
                        this.send({
                          embeds: [setEmbedAuthor(this.embed, user)],
                        });
                      }
                    });
                  } else {
                    this.embed.setDescription(
                      `–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–¥–∞—Ä–∏—Ç—å ü•ï. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.`,
                    );
                    this.send({
                      embeds: [setEmbedAuthor(this.embed, user)],
                    });
                  }
                });
              } else {
                this.embed.setDescription(
                  '–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Ç–≤–æ–π –¥—Ä—É–≥ –µ—â–µ –Ω–µ –æ—Ç–∫—Ä—ã–ª —Å–≤–æ—é —Ñ–µ—Ä–º—É!',
                );
                this.send({
                  embeds: [setEmbedAuthor(this.embed, user)],
                });
              }
            });
          } else {
            if (!userMention) {
              this.embed.setDescription('–¢—ã –Ω–µ —É–ø–æ–º—è–Ω—É–ª –¥—Ä—É–≥–∞!');
              this.send({
                embeds: [setEmbedAuthor(this.embed, user)],
              });
            } else if (!count) {
              this.embed.setDescription('–¢—ã –Ω–µ —É–∫–∞–∑–∞–ª –∫–æ–ª-–≤–æ ü•ï!');
              this.send({
                embeds: [setEmbedAuthor(this.embed, user)],
              });
            } else if (userMention.id === user.id || userMention.bot) {
              this.embed.setDescription('–ù–µ–ª—å–∑—è –ø–æ–¥–∞—Ä–∏—Ç—å —Å–µ–±–µ ü•ï!');
              this.send({
                embeds: [setEmbedAuthor(this.embed, user)],
              });
            } else if (count > maxGiftCount) {
              this.embed.setDescription('–ù–µ–ª—å–∑—è –ø–æ–¥–∞—Ä–∏—Ç—å –±–æ–ª—å—à–µ 10 ü•ï –∑–∞ —Ä–∞–∑!');
              this.send({
                embeds: [setEmbedAuthor(this.embed, user)],
              });
            } else if (player.dailyGiftCount === 0) {
              this.embed.setDescription(
                '–¢–≤–æ–π –ª–∏–º–∏—Ç –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω!',
              );
              this.send({
                embeds: [setEmbedAuthor(this.embed, user)],
              });
            } else {
              this.embed.setDescription('–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ü•ï!');
              this.send({
                embeds: [setEmbedAuthor(this.embed, user)],
              });
            }
          }
        } else {
          this.replyNoUser(user);
        }
      });
    });
  }
}

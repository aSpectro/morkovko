import Command from './Command';
import { setEmbedAuthor } from './helpers';
import { AppService } from './../../app.service';
import { WarsService } from 'src/wars.service';

export class ExitCommand extends Command {
  constructor(
    commandName: string,
    needEvents: boolean,
    warsService?: WarsService,
  ) {
    super(commandName, needEvents, warsService);
  }

  run(
    message: any,
    args: any,
    service: AppService,
    isSlash: boolean | undefined,
  ) {
    this.initCommand(message, args, service, isSlash, () => {
      const user = this.getUser();
      service.checkUser(user.id).then(async (res) => {
        if (res.status === 200) {
          const player = res.player;
          const userFriends = player.relations;
          const exitPing = () => {
            const mentions = userFriends.map((m) => `<@${m.userId}>`).join(' ');
            this.send(
              `${mentions} –í–∞—à –¥—Ä—É–≥ —Ö–æ—á–µ—Ç –≤—ã–∫—Ç–∏, –ø–æ–¥–∞—Ä–∏—Ç–µ –µ–º—É ${this.locale.getEnum('–º–æ—Ä–∫–æ–≤–æ–∫')}!`,
            );
          };

          const exitResult = async () => {
            this.resetPlayer(player);
            player.progressBonus += 1;
            const resSave = await this.service.savePlayer(player);
            if (resSave.status === 200) {
              this.embed.setDescription(
                `–¢–≤–æ—è ${this.locale.getEnum('–º–æ—Ä–∫–æ–≤–∫–∞')} –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∞—è, —Ç—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã, —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –±—ã–ª —Å–±—Ä–æ—à–µ–Ω! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é üíö!\n
                –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –±–æ–Ω—É—Å ${player.progressBonus}% –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞ ${this.locale.getEnum('–º–æ—Ä–∫–æ–≤–∫–∏')} –∏ x${player.progressBonus} –∫–æ–ª-–≤—É –≤—ã—Ä–∞—â–µ–Ω–Ω–æ–π ${this.locale.getEnum('–º–æ—Ä–∫–æ–≤–∫–∏')} –∏ –∑–∞ –º–æ–ª–∏—Ç–≤—É.\n`,
              );
              this.send({
                embeds: [setEmbedAuthor(this.embed, user)],
              });
            } else {
              exitPing();
            }
          };

          if (userFriends && userFriends.length > 0) {
            if (
              player.carrotSize >= this.getExitCarrotSize(player.progressBonus)
            ) {
              exitResult();
            } else {
              exitPing();
            }
          } else {
            this.embed.setDescription(`–£ —Ç–µ–±—è –Ω–µ—Ç –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –≤—ã–∫—Ç–∏.`);
            this.send({
              embeds: [setEmbedAuthor(this.embed, user)],
            });
          }
        } else {
          this.replyNoUser(user);
        }
      });
    });
  }
}

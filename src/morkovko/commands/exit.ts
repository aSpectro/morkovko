import Command from './Command';
import { setEmbedAuthor } from './helpers';
import { AppService } from './../../app.service';

export class ExitCommand extends Command {
  constructor(commandName: string) {
    super(commandName);
  }

  run(
    message: any,
    args: any,
    service: AppService,
    isSlash: boolean | undefined,
  ) {
    this.initCommand(message, args, service, isSlash, () => {
      const user = this.getUser();
      service.checkUser(user.id).then((res) => {
        if (res.status === 200) {
          const player = res.player;
          const userFriends = player.relations;
          const exitPing = () => {
            const mentions = userFriends.map((m) => `<@${m.userId}>`).join(' ');
            this.send(
              `${mentions} –í–∞—à –¥—Ä—É–≥ —Ö–æ—á–µ—Ç –≤—ã–∫—Ç–∏, –ø–æ–¥–∞—Ä–∏—Ç–µ –µ–º—É –º–æ—Ä–∫–æ–≤–æ–∫!`,
            );
          };
          if (userFriends && userFriends.length > 0) {
            if (
              player.carrotSize >= this.getExitCarrotSize(player.progressBonus)
            ) {
              this.resetPlayer(player);
              player.progressBonus += 1;
              player.stars += this.config.bot.economy.exitStars;
              this.service.savePlayer(player).then((resSave) => {
                if (resSave.status === 200) {
                  this.embed.setDescription(
                    `–¢–≤–æ—è –º–æ—Ä–∫–æ–≤–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∞—è, —Ç—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã, —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –±—ã–ª —Å–±—Ä–æ—à–µ–Ω! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é üíö!\n
                    –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –±–æ–Ω—É—Å ${player.progressBonus}% –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞ –º–æ—Ä–∫–æ–≤–∫–∏ –∏ x${player.progressBonus} –∫–æ–ª-–≤—É –≤—ã—Ä–∞—â–µ–Ω–Ω–æ–π –º–æ—Ä–∫–æ–≤–∫–∏ –∏ –∑–∞ –º–æ–ª–∏—Ç–≤—É.\n
                    –¢–∞–∫ –∂–µ —Ç—ã –ø–æ–ª—É—á–∏–ª **${this.config.bot.economy.exitStars}**‚≠ê. –ó–≤–µ–∑–¥—ã –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ–±–º–µ–Ω—è—Ç—å –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ –Ω–∞ –¥–æ–ø. –±–æ–Ω—É—Å—ã.`,
                  );
                  this.send({
                    embeds: [setEmbedAuthor(this.embed, user)],
                  });
                } else {
                  exitPing();
                }
              });
            } else {
              exitPing();
            }
          } else {
            this.embed.setDescription(`–£ —Ç–µ–±—è –Ω–µ—Ç –¥—Ä—É–∑–µ–π, —á—Ç–æ–±—ã –≤—ã–∫—Ç–∏.`);
            this.send({
              embeds: [setEmbedAuthor(this.embed, user)],
            });
          }
        } else {
          this.replyNoUser(user);
        }
      });
    });
  }
}
